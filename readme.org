#+title: Dotfiles
#+property: header-args :noweb yes
#+property: header-args:nix :tangle no
#+property: header-args:conf-yaml :tangle ~/.fzf-marks

These are my "mostly literate" dotfiles. I'm currently using a mix of GNU Stow to manage the larger dotfiles (such as my Qtile config and my Doom Emacs config), while I use [[github:nix-community/home-manager][Home-Manager]] to manage things such as my alacritty config.

First I need to set up metadata for home-manager to be able to run properly.
#+name: hm-core
#+begin_src nix :tangle ~/.config/nixpkgs/home.nix
{ config, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = "jhilker";
  home.homeDirectory = "/home/jhilker";

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "22.05";

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
  targets.genericLinux.enable = true;
  <<hm-packages>>
  <<hm-shells>>
  <<hm-editors>>
  <<hm-git>>
  <<hm-gpg>>
}
#+end_src

* Packages
I have several packages I'd like to install - namely GNU Stow, Hugo, and neofetch, though as I install more I will add them here.
#+name: hm-packages
#+begin_src nix
home.packages = with pkgs; [
    stow
    hugo
    neofetch
    jq
    <<hmDoomPkgs>>
    <<hmPythonPkgs>>
  ];
#+end_src
** Doom Emacs Requirements
I need to add doom emacs' requirements here.
#+name: hmDoomPkgs
#+begin_src nix
sqlite
binutils
(ripgrep.override { withPCRE2 = true; })
gnutls
fd
imagemagick
zstd
nodePackages.javascript-typescript-langserver
editorconfig-core-c
emacs-all-the-icons-fonts
#+end_src
** Language Configuration
*** Python
I love working with python, but I've found that maintaining dependencies can be a pain. While I normally like to keep a few global packages (such as numpy/pandas, matplotlib, fontforge, and flask), I much prefer to use something like virtualenvwrapper to maintain environments for each project.
#+name: hmPythonPkgs
#+begin_src nix
(python39.withPackages(p: with p; [
  fontforge
  numpy
  pandas
  flask
  virtualenvwrapper
  pip
]))
#+end_src


* Shell Configuration
I use ZSH for my day-to-day shell. However, because I'm currently using WSL2, I wanted to be able to manage bash as well. I merely enable bash integration here, though I want to set up autoCD as well, since I tend to use that as well as FZF-marks.
#+name: hm-shells
#+begin_src nix
<<hmFzf>>
<<hmZsh>>
<<hmBash>>
<<hmStarship>>
#+end_src
** Variables
I have a few global chan
** Programs
*** FZF
#+name: hmFzf
#+begin_src nix
programs.fzf = {
    enable = true;
    enableBashIntegration = true;
    enableZshIntegration = true;
};
#+end_src

**** FZF-Marks
I normally use fzf-marks to quickly jump to my most commonly used directories - such as my roam directories, etc.
#+begin_src conf-yaml
winhome: /mnt/c/Users/camoh/
dotfiles: ~/.dotfiles/
org: /mnt/c/Users/camoh/Dropbox/org/
#+end_src


*** ZSH
I prefer to use ZSH over Bash because of syntax highlighting and autosuggestions.
#+name: hmZsh
#+begin_src nix
programs.zsh = {
  enable = true;
  enableSyntaxHighlighting = true;
  enableAutosuggestions = true;
  autocd = true;
  initExtra = ''
    <<venvWrapperConf>>
    source ~/.local/fzf-marks/fzf-marks.plugin.zsh
    <<runDocker>>
  '';
};
#+end_src

*** Bash
Although I normally use ZSH, sometimes I might want or need to use bash for a simple script. This just sets up my ZSH to be run if if my nix zsh exists.
#+name: hmBash
#+begin_src nix
programs.bash = {
  enable = true;
  initExtra = ''
    <<venvWrapperConf>>
    source ~/.local/fzf-marks/fzf-marks.plugin.bash
    <<runDocker>>
    if [[ -e  "$HOME/.nix-profile/bin/zsh" ]]; then exec "~/.nix-profile/bin/zsh"; fi
    '';
};
#+end_src

*** Starship
Starship is my terminal prompt of choice - what can I say, it's absolutely incredible.
#+name: hmStarship
#+begin_src nix
programs.starship = {
  enable = true;
  enableBashIntegration = true;
  enableZshIntegration = true;
  settings = {
    line_break.disabled = true;
  };
};
#+end_src

** Misc Changes
*** Enabling VirtualEnvWrapper

#+name: venvWrapperConf
#+begin_src nix
source "${pkgs.python39Packages.virtualenvwrapper.outPath}/bin/virtualenvwrapper.sh"
#+end_src

*** Enabling Docker
I want to enable docker on startup.
#+name: runDocker
#+begin_src sh
RUNNING=`ps aux | grep dockerd | grep -v grep`
if [ -z "$RUNNING" ]; then
    sudo dockerd > /dev/null 2>&1 &
    disown
fi
#+end_src

* Editors
While I normally use emacs for large-scale projects, I do like to use neovim for quick edits.
#+name: hm-editors
#+begin_src nix
programs.emacs.enable = true;
services.emacs.enable = true;
<<hm-neovim>>
#+end_src
** Neovim
I want to enable neovim here.
#+name: hm-neovim
#+begin_src nix
programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;
};
#+end_src

* Git
Is there really that much to say about this config? It's not that fancy.
#+name: hm-git
#+begin_src nix
programs.git = {
  enable = true;
  userName = "Jacob Hilker";
  userEmail = "jacob.hilker2@gmail.com";
  signing = {
    key = "jacob.hilker2@gmail.com";
    signByDefault = true;
  };
  <<hmGitDelta>>
  <<hmGitExtra>>
};
#+end_src
** Extra Configuration
I like to use "main" as my default branch rather than "master".
#+name: hmGitExtra
#+begin_src nix
extraConfig = {
  init.defaultBranch = "main";
};
#+end_src

** Delta
I like to use delta for viewing diffs.
#+name: hmGitDelta
#+begin_src nix
delta = {
  enable = true;
};
#+end_src

* GPG
I use gpg to sign all of my git commits and to encrypt sensitive files.
#+name: hm-gpg
#+begin_src nix
programs.gpg.enable = true;
<<hm-gpg-agent>>
#+end_src
** GPG-Agent
Howver, although I love gpg, I don't want to enter a password every 10 minutes - I'd much rather enter the password once for the day and enable that.
#+name: hm-gpg-agent
#+begin_src nix
services.gpg-agent = {
  enable = true;
  enableBashIntegration = true;
  enableZshIntegration = true;
  enableSshSupport = true;
  defaultCacheTtl = 86400;
  defaultCacheTtlSsh = 86400;
};
#+end_src
